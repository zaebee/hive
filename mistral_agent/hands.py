"""
The Hands of the Mistral Agent.

This module provides the functionality for the agent to "act" upon the world
by modifying the filesystem. It is responsible for applying code patches
generated by the agent's "Mind".
"""
import re
from pathlib import Path

def apply_code_patch(file_path: Path, diff_string: str) -> bool:
    """
    Applies a code patch to a file based on a git merge-diff format.

    Args:
        file_path: The path to the file to be patched.
        diff_string: A string containing the diff in the format:
                     <<<<<<< SEARCH
                     ... (code to find)
                     =======
                     ... (code to replace with)
                     >>>>>>> REPLACE

    Returns:
        True if the patch was successfully applied, False otherwise.

    Raises:
        ValueError: If the diff string is malformed.
    """
    if not diff_string:
        return False

    # Regex to parse the git merge-diff format
    match = re.match(
        r'<<<<<<< SEARCH\n(.*?)\n=======\n(.*?)\n>>>>>>> REPLACE\n?$',
        diff_string,
        re.DOTALL
    )

    if not match:
        if '=======' not in diff_string:
            raise ValueError("Malformed diff: Separator '=======' not found.")
        if '<<<<<<< SEARCH' not in diff_string:
            raise ValueError("Malformed diff: Header '<<<<<<< SEARCH' not found.")
        if '>>>>>>> REPLACE' not in diff_string:
            raise ValueError("Malformed diff: Footer '>>>>>>> REPLACE' not found.")
        raise ValueError("Malformed diff: Does not match expected git merge-diff format.")

    search_block, replace_block = match.groups()

    try:
        original_content = file_path.read_text()
    except FileNotFoundError:
        original_content = ""

    # If search block is empty or just whitespace, it's an insertion.
    # This should only be allowed if the target file is also empty.
    if not search_block.strip():
        if original_content.strip():
            return False  # Cannot insert into a non-empty file this way.
        else:
            new_content = replace_block
    elif search_block not in original_content:
        return False
    else:
        new_content = original_content.replace(search_block, replace_block, 1)

    file_path.write_text(new_content)
    return True
